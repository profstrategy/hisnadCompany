// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
   output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}


model User {
  id                   String      @id @default(cuid())
  firstName            String?
  lastName             String?
  address              String?
  phoneNumber          String ?     
  nextOfKinName        String?
  nextOfKinPhoneNumber String?
  nextOfKinAddress     String?
  email                String      @unique
  password_hash        String?
  accountType          AccountType @default(USER)
  status               UserStatus  @default(pending)
  selected_product_id  Int?        
  created_at           DateTime    @default(now())
  updated_at           DateTime    @updatedAt
  
  // Relations
  refreshTokens   RefreshToken[] @relation("UserRefreshToken")
  sessions        Session[]
  subscriptions   Subscription[]
  selectedProduct SegregatedProperties? @relation("UserSelectedProduct", fields: [selected_product_id], references: [id])
  
  @@index([id])
  @@index([email])
  @@index([phoneNumber])
  @@index([lastName, firstName])
  @@map("users")
}

model RefreshToken {
  id         String   @id @default(cuid())
  token      String   @unique
  user_id    String  
  isActive  Boolean  @default(true)
  expires_at DateTime
  created_at DateTime @default(now())

  // Relations
  user User @relation("UserRefreshToken",fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([token])
  @@index([expires_at]) 
  @@map("refresh_tokens")
}

model Session {
  id           String   @id @default(cuid())
  token        String   @unique 
  user_id      String  
  expires_at   DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  last_used_at DateTime @default(now())
  isActive     Boolean  @default(true)
  ip_address   String?
  user_agent   String?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([token])
  @@index([expires_at])
  @@index([isActive]) 
  @@map("sessions")
}

model Subscription {
  id                String            @id @default(cuid())
  user_id           String           
  product_id        Int         
  status            SubscriptionStatus @default(active)
  payment_intent_id String?
  amount            Float?            
  currency          String?           @default("NGN")
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt

  // Relations
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product SegregatedProperties @relation("ProductSubscriptions", fields: [product_id], references: [id])

  @@index([user_id])
  @@index([product_id])
  @@index([status])
  @@map("subscriptions")
}



model SegregatedProperties {
  id          Int           @id @default(autoincrement())
  type        Type
  mainImage   String[]
  tier        Tier
  status      ProductStatus @default(Available)
  price       String[]
  title       String
  slug        String
  location    String
  category    String
  features    String[]
  description String?
  benefit     String[]
  documents   String[]
  payment     String[]
  property_id String?        
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt


  subscriptions    Subscription[] @relation("ProductSubscriptions")
  selectedByUsers  User[]         @relation("UserSelectedProduct")
  
  @@index([property_id])
  @@index([status])
  @@index([category])
}

// Separated enums for different purposes

enum UserStatus {
  pending
  onboarded  
  paid
  active
}

enum SubscriptionStatus {
  active
  cancelled
  expired
  pending
}

enum ProductStatus {
  Available
  Sold
  Discontinued
}

enum AccountType {
  ADMIN
  USER
}

enum Type {
  Hisnad
  Featured
}

enum Tier {
  Residential
  Farmland
}
